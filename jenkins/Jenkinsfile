pipeline {
    agent any

    tools {
        gradle 'gradle-8.10'
        nodejs 'node-20.15.0'
    }

    environment {
        FRONTEND_DIR = './frontend'
        BACKEND_DIR = './backend/mijung'
        // FRONTEND_IMG = 'mijung_frontend'
        BACKEND_IMG = 'mijung_backend'
        PROJECT_DIR = '/home/ubuntu/jenkins-project'
        AWS_HOST = credentials('AWS_HOST')
        AWS_IP = credentials('AWS_IP')
    }

    triggers {
        pollSCM 'H 12,5,23 * * 1-5'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checkout processing...'
                checkout scm
                // git branch: 'main', \
                //     credentialsId: 'jenkins-test-gitlab', \
                //     url: 'https://gitlab.com/vaaast-lake/jenkins-project.git'
                echo 'Checkout done'
            }
        }
        stage('Builds') {
            parallel {
                stage('BE Build') {
                    steps {
                        echo 'BE Building...'
                        dir("${BACKEND_DIR}") {
                            sh 'chmod +x ./gradlew'
                            sh './gradlew clean build'
                        }
                        echo 'BE Building complete.'
                    }
                }
                stage('FE Build') {
                    steps {
                        echo 'FE Building...'
                        dir("${FRONTEND_DIR}") {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                        echo 'FE Building complete.'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                echo 'No test here.'
            }
        }
        stage('Build Backend docker images & deliver') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'dockerhub',
                        passwordVariable: 'DOCKER_PASSWORD',
                        usernameVariable: 'DOCKER_USERNAME'
                )]) {
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    dir("${BACKEND_DIR}") {
                        echo 'Building BE docker image...'
                        sh "docker build -t $DOCKER_USERNAME/${BACKEND_IMG}:${env.BUILD_ID} ."
                        sh "docker tag $DOCKER_USERNAME/${BACKEND_IMG}:${env.BUILD_ID} \
                            $DOCKER_USERNAME/${BACKEND_IMG}:latest"
                        sh "docker push $DOCKER_USERNAME/${BACKEND_IMG}:${env.BUILD_ID}"
                        sh "docker push $DOCKER_USERNAME/${BACKEND_IMG}:latest"
                        echo 'Building BE docker image complete.'
                    }
                    // fe build 결과는 nginx로 배포하기에 이미지 빌드 불필요
                    // dir("${FRONTEND_DIR}") {
                    //     echo 'Building FE docker image...'
                    //     sh "docker build -t $DOCKER_USERNAME/${FRONTEND_IMG}:${env.BUILD_ID} ."
                    //     sh "docker tag $DOCKER_USERNAME/${FRONTEND_IMG}:${env.BUILD_ID} \
                    //         $DOCKER_USERNAME/${FRONTEND_IMG}:latest"
                    //     sh "docker push $DOCKER_USERNAME/${FRONTEND_IMG}:${env.BUILD_ID}"
                    //     sh "docker push $DOCKER_USERNAME/${FRONTEND_IMG}:latest"
                    //     echo 'Building FE docker image complete.'
                    // }
                }
            }
        }
        stage('Send Frontend build file to EC2') {
            steps{
                dir("${FRONTEND_DIR}") {
                    sshagent(['ssh-agent']) {
                        script {
                             // 먼저 원격 서버에 임시 디렉토리 생성
                            sh "ssh ubuntu@${AWS_IP} 'mkdir -p jenkins-project/temp'"
                            
                            // scp를 사용하여 파일을 전송
                            sh "scp -r ./dist/* ubuntu@${AWS_IP}:jenkins-project/temp/"
                            
                            // 원격 서버에서 파일을 이동하고 정리
                            sh """
                                ssh ubuntu@${AWS_IP} '
                                    rm -rf jenkins-project/dist &&
                                    mv jenkins-project/temp jenkins-project/dist &&
                                    find jenkins-project/dist -type d -exec chmod 755 {} \\; &&
                                    find jenkins-project/dist -type f -exec chmod 644 {} \\;
                                '
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                echo 'Deploying....'
                withCredentials([usernamePassword(credentialId: 'gitlab-credential', usernameVariable: 'GITLAB_USERNAME', passwordVariable: 'GITLAB_PASSWORD')]) {
                    sshagent(['ssh-agent']) {
                        script {
                            sh """
                                ssh ubuntu@${AWS_IP} '
                                    echo current branch name is ${env.BRANCH_NAME}
                                    docker rmi vaaastlake/mijung_backend
                                    cd ./S11P21D107
                                    git pull https://${GITLAB_USERNAME}:${GITLAB_PASSWORD}@ \
                                        lab.ssafy.com/s11-bigdata-dist-sub1/S11P21D107.git ${env.BRANCH_NAME}
                                    docker compose restart
                                '
                            """
                            // sh "git pull origin ${}"
                            // sh "ssh ubuntu@${AWS_IP} 'docker compose '"
                        } 
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'Build Success.'
        }
        failure {
            echo 'Build Fail.'
        }
    }
}